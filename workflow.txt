module -> package -> source files

To compile and run a simple program, first choose a module path - we'll use example/user/hello
 and create a go.mod file that declares it:

$ mkdir hello # Alternatively, clone it if it already exists in version control.
$ cd hello
$ go mod init example/user/hello
go: creating new go.mod: module example/user/hello
$ cat go.mod
module example/user/hello

go 1.18
$
The first statement in a Go source file must be package name. Executable commands must always use package main.

Next, create a file named hello.go inside that directory containing the following Go code:

package main

import "fmt"

func main() {
    fmt.Println("Hello, world.")
}
Now you can build and install that program with the go tool:

$ go install example/user/hello
$
This command builds the hello command, producing an executable binary.
 It then installs that binary as $HOME/go/bin/hello
  or, under Windows, %USERPROFILE%\go\bin\hello.exe ->  C:\Users\AKaarna\go\bin\hello.exe

The install directory is controlled by the GOPATH and GOBIN environment variables.
 If GOBIN is set, binaries are installed to that directory.
 If GOPATH is set, binaries are installed to the bin subdirectory of the first directory in the GOPATH list.
 GOPATH=C:\Users\AKaarna\go
 Otherwise, binaries are installed to the bin subdirectory of the default GOPATH ($HOME/go or %USERPROFILE%\go).

You can use the go env command to portably set the default value for an environment variable for future go commands:
$ go env -w GOBIN=/somewhere/else/bin
$

To unset a variable previously set by go env -w, use go env -u:
$ go env -u GOBIN
$

Commands like go install apply within the context of the module containing the current working directory.
 If the working directory is not within the example/user/hello module, go install may fail.

For convenience, go commands accept paths relative to the working directory, and default to the package in the current working directory if no other path is given. So in our working directory, the following commands are all equivalent:
$ go install example/user/hello
$ go install .
$ go install

Next, let's run the program to ensure it works:
PS C:\GoTest\HTWC\hello> C:\Users\AKaarna\go\bin\hello    
Hello, world.
PS C:\GoTest\HTWC\hello> 

If you're using a source control system, now would be a good time to initialize a repository, add the files,
 and commit your first change. Again, this step is optional: you do not need to use source control to write Go code.

$ git init
Initialized empty Git repository in /home/user/hello/.git/
$ git add go.mod hello.go
$ git commit -m "initial commit"
[master (root-commit) 0b4507d] initial commit
 1 file changed, 7 insertion(+)
 create mode 100644 go.mod hello.go
$
The go command locates the repository containing a given module path by requesting a corresponding HTTPS URL
 and reading metadata embedded in the HTML response (see go help importpath).
 Many hosting services already provide that metadata for repositories containing Go code,
 so the easiest way to make your module available for others to use is usually to make its module path match
 the URL for the repository.

PS C:\GoTest\HTWC\hello> git init
Initialized empty Git repository in C:/GoTest/HTWC/hello/.git/
PS C:\GoTest\HTWC\hello> git add go.mod hello.go
warning: LF will be replaced by CRLF in go.mod.
The file will have its original line endings in your working directory
PS C:\GoTest\HTWC\hello> git commit -m "initial commit"
[master (root-commit) 282f148] initial commit
 2 files changed, 10 insertions(+)
 create mode 100644 go.mod
 create mode 100644 hello.go
PS C:\GoTest\HTWC\hello> 

Importing packages from your module
Let's write a morestrings package and use it from the hello program. First, create a directory for the package named $HOME/hello/morestrings, and then a file named reverse.go in that directory with the following contents:

// Package morestrings implements additional functions to manipulate UTF-8
// encoded strings, beyond what is provided in the standard "strings" package.
package morestrings

// ReverseRunes returns its argument string reversed rune-wise left to right.
func ReverseRunes(s string) string {
    r := []rune(s)
    for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {
        r[i], r[j] = r[j], r[i]
    }
    return string(r)
}
Because our ReverseRunes function begins with an upper-case letter, it is exported, and can be used in other packages that import our morestrings package.

Let's test that the package compiles with go build:

$ cd $HOME/hello/morestrings
$ go build
$
This won't produce an output file. Instead it saves the compiled package in the local build cache.

After confirming that the morestrings package builds, let's use it from the hello program. To do so, modify your original $HOME/hello/hello.go to use the morestrings package:

package main

import (
    "fmt"

    "example/user/hello/morestrings"
)

func main() {
    fmt.Println(morestrings.ReverseRunes("!oG ,olleH"))
}
Install the hello program:

$ go install example/user/hello
Running the new version of the program, you should see a new, reversed message:

$ hello
Hello, Go!

Importing packages from remote modules
An import path can describe how to obtain the package source code using a revision control system such as Git or Mercurial. The go tool uses this property to automatically fetch packages from remote repositories. For instance, to use github.com/google/go-cmp/cmp in your program:

package main

import (
    "fmt"

    "example/user/hello/morestrings"
    "github.com/google/go-cmp/cmp"
)

func main() {
    fmt.Println(morestrings.ReverseRunes("!oG ,olleH"))
    fmt.Println(cmp.Diff("Hello World", "Hello Go"))
}
Now that you have a dependency on an external module, you need to download that module and record its version in your go.mod file.
The go mod tidy command adds missing module requirements for imported packages and removes requirements on modules that aren't used anymore.

$ go mod tidy
go: finding module for package github.com/google/go-cmp/cmp
go: found github.com/google/go-cmp/cmp in github.com/google/go-cmp v0.5.4
$ go install example/user/hello
$ hello
Hello, Go!
  string(
-     "Hello World",
+     "Hello Go",
  )
$ cat go.mod
module example/user/hello

go 1.16

require github.com/google/go-cmp v0.5.4
$

NB!!! Module dependencies are automatically downloaded to the pkg/mod subdirectory of the directory indicated by the GOPATH
 environment variable.
The downloaded contents for a given version of a module are shared among all other modules that require that version,
 so the go command marks those files and directories as read-only.
To remove all downloaded modules, you can pass the -modcache flag to go clean:

$ go clean -modcache
$

Testing
Go has a lightweight test framework composed of the go test command and the testing package.

You write a test by creating a file with a name ending in _test.go that contains functions named TestXXX with signature func (t *testing.T). The test framework runs each such function; if the function calls a failure function such as t.Error or t.Fail, the test is considered to have failed.

Add a test to the morestrings package by creating the file $HOME/hello/morestrings/reverse_test.go containing the following Go code.

package morestrings

import "testing"

func TestReverseRunes(t *testing.T) {
    cases := []struct {
        in, want string
    }{
        {"Hello, world", "dlrow ,olleH"},
        {"Hello, 世界", "界世 ,olleH"},
        {"", ""},
    }
    for _, c := range cases {
        got := ReverseRunes(c.in)
        if got != c.want {
            t.Errorf("ReverseRunes(%q) == %q, want %q", c.in, got, c.want)
        }
    }
}
Then run the test with go test:

$ cd $HOME/hello/morestrings
$ go test
PASS
ok  	example/user/hello/morestrings 0.165s
$
Run go help test and see the testing package documentation for more detail.


Publishing steps
Use the following steps to publish a module.

Open a command prompt and change to your module’s root directory in the local repository.

Run go mod tidy, which removes any dependencies the module might have accumulated that are no longer necessary.
$ go mod tidy

Run go test ./... a final time to make sure everything is working.
This runs the unit tests you’ve written to use the Go testing framework.
$ go test ./...
ok      example.com/mymodule       0.015s

Tag the project with a new version number using the git tag command.
For the version number, use a number that signals to users the nature of changes in this release.
For more, see Module version numbering.

$ git commit -m "mymodule: changes for v0.1.0"
$ git tag v0.1.0
Push the new tag to the origin repository.

$ git push origin v0.1.0

Make the module available by running the go list command to prompt Go to update its index of modules
 with information about the module you’re publishing.
Precede the command with a statement to set the GOPROXY environment variable to a Go proxy.
 This will ensure that your request reaches the proxy.
 set GOPROXY=https://proxy.golang.org,direct default is ok

$ GOPROXY=proxy.golang.org go list -m example.com/mymodule@v0.1.0
go list -m example.com/mymodule@v0.1.0

PS C:\GoTest\HTWC\hello> go list -m github.com/allkaa/hello@v0.1.0
github.com/allkaa/hello v0.1.0
PS C:\GoTest\HTWC\hello>


Developers interested in your module import a package from it and run the go get command just as they would with any other module.
They can run the go get command for latest versions or they can specify a particular version, as in the following example:
$ go get example.com/mymodule@v0.1.0
PS C:\GoTest\HTWC\hello> go get github.com/allkaa/hello@v0.1.0

==============================================================================================================================
On package using side:
Create myTest.go as

------------------------------------------------------------------------------
package main

import (
	"fmt"

	"github.com/allkaa/hello/morestrings"
)

func main() {
	fmt.Println(morestrings.ReverseRunes("!buhtig morf oG ,olleH"))
}
------------------------------------------------------------------------------

PS C:\GoTest\HTWC2> go mod init hello
go: creating new go.mod: module hello
go: to add module requirements and sums use go mod tidy:

------------------------------------------------------------------------------
module hello

go 1.18
------------------------------------------------------------------------------


PS C:\GoTest\HTWC2> go mod tidy
go: finding module for package github.com/allkaa/hello/morestrings
go: downloading github.com/allkaa/hello v0.1.0
go: found github.com/allkaa/hello/morestrings in github.com/allkaa/hello v0.1.0
go: hello imports
        github.com/allkaa/hello/morestrings: github.com/allkaa/hello@v0.1.0: parsing go.mod:
        module declares its path as: example/user/hello
                but was required as: github.com/allkaa/hello

NB!!! For publishing dev side must have local and real remote public repo e.g. github.com/allkaa/hello
and module path must be not example/user/hello but real remote public git repo path -> github.com/allkaa/hello !!!!!!!!!!!!!
On module and packages development side change module path from example/user/hello to github.com/allkaa/hello
and commit and sync repository. Creage new version tag and push it.
PS C:\GoTest\HTWC\hello> git tag v0.1.1
PS C:\GoTest\HTWC\hello> git push origin v0.1.1
Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/allkaa/hello.git
 * [new tag]         v0.1.1 -> v0.1.1

Make the new version module available by running the go list command to prompt Go to update its index of modules
PS C:\GoTest\HTWC\hello> go list -m github.com/allkaa/hello@v0.1.1
github.com/allkaa/hello v0.1.1
PS C:\GoTest\HTWC\hello> 

Back on package using side
The go mod tidy command adds missing module requirements for imported packages
 and removes requirements on modules that aren't used anymore.
PS C:\GoTest\HTWC2> go mod tidy
go: finding module for package github.com/allkaa/hello/morestrings
go: downloading github.com/allkaa/hello v0.1.1
go: found github.com/allkaa/hello/morestrings in github.com/allkaa/hello v0.1.1
PS C:\GoTest\HTWC2> 
------------------------------------------------------------------------------
module hello

go 1.18

require github.com/allkaa/hello v0.1.1
------------------------------------------------------------------------------

NB!!! Module dependencies are automatically downloaded to the pkg/mod subdirectory of the directory indicated by the GOPATH
 environment variable GOPATH=C:\Users\AKaarna\go
The downloaded contents for a given version of a module are shared among all other modules that require that version,
 so the go command marks those files and directories as read-only.
To remove all downloaded modules, you can pass the -modcache flag to go clean:

$ go clean -modcache
$